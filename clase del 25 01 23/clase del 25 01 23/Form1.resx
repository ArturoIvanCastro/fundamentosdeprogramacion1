<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAD/2Q==
</value>
  </data>
</root>